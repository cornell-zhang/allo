# Copyright Allo authors. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
# mlir-aie commit: 8329b6
# pylint: disable=consider-using-with, bad-builtin

import os
import subprocess
import numpy as np

from .vitis import read_tensor_from_file
from ..ir.transform import find_func_in_module
from ..utils import get_func_inputs_outputs
from .utils import format_str, format_code
from .vitis import ctype_map


host_header = """
//=============================================================================
// Auto generated by Allo
//=============================================================================

#include <boost/program_options.hpp>
#include <cstdint>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include "xrt/xrt_bo.h"
#include "xrt/xrt_device.h"
#include "xrt/xrt_kernel.h"

#include "test_utils.h"

namespace po = boost::program_options;

int main(int argc, const char *argv[]) {

  // ------------------------------------------------------
  // Parse program arguments
  // ------------------------------------------------------
  po::options_description desc("Allowed options");
  po::variables_map vm;
  test_utils::add_default_options(desc);

  test_utils::parse_options(argc, argv, desc, vm);
  int verbosity = vm["verbosity"].as<int>();
  int do_verify = vm["verify"].as<bool>();
  int n_iterations = vm["iters"].as<int>();
  int n_warmup_iterations = vm["warmup"].as<int>();
  int trace_size = vm["trace_sz"].as<int>();

  // Load instruction sequence
  std::vector<uint32_t> instr_v =
      test_utils::load_instr_sequence(vm["instr"].as<std::string>());
  if (verbosity >= 1)
    std::cout << "Sequence instr count: " << instr_v.size() << "\\n";

  // ------------------------------------------------------
  // Get device, load the xclbin & kernel and register them
  // ------------------------------------------------------
  // Get a device handle
  unsigned int device_index = 0;
  auto device = xrt::device(device_index);

  // Load the xclbin
  if (verbosity >= 1)
    std::cout << "Loading xclbin: " << vm["xclbin"].as<std::string>() << "\\n";
  auto xclbin = xrt::xclbin(vm["xclbin"].as<std::string>());

  // Load the kernel
  if (verbosity >= 1)
    std::cout << "Kernel opcode: " << vm["kernel"].as<std::string>() << "\\n";
  std::string Node = vm["kernel"].as<std::string>();

  // Get the kernel from the xclbin
  auto xkernels = xclbin.get_kernels();
  auto xkernel = *std::find_if(xkernels.begin(), xkernels.end(),
                               [Node, verbosity](xrt::xclbin::kernel &k) {
                                 auto name = k.get_name();
                                 if (verbosity >= 1) {
                                   std::cout << "Name: " << name << std::endl;
                                 }
                                 return name.rfind(Node, 0) == 0;
                               });
  auto kernelName = xkernel.get_name();

  // Register xclbin
  if (verbosity >= 1)
    std::cout << "Registering xclbin: " << vm["xclbin"].as<std::string>()
              << "\\n";
  device.register_xclbin(xclbin);

  // Get a hardware context
  if (verbosity >= 1)
    std::cout << "Getting hardware context.\\n";
  xrt::hw_context context(device, xclbin.get_uuid());

  // Get a kernel handle
  if (verbosity >= 1)
    std::cout << "Getting handle to kernel:" << kernelName << "\\n";
  auto kernel = xrt::kernel(context, kernelName);

  // ------------------------------------------------------
  // Initialize input/ output buffer sizes and sync them
  // ------------------------------------------------------
  auto bo_instr = xrt::bo(device, instr_v.size() * sizeof(int),
                          XCL_BO_FLAGS_CACHEABLE, kernel.group_id(1));
  void *bufInstr = bo_instr.map<void *>();
  memcpy(bufInstr, instr_v.data(), instr_v.size() * sizeof(int));

  std::ofstream ofile("output.data");
  if (!ofile.is_open()) {
      std::cerr << "Error: Could not open output file.\\n";
      return 1;
  }

"""

file_close_str = """  ofile.close();
  if (verbosity >= 1)
    std::cout << "Array has been written to output.data.\\n";
  return 0;
}
"""


def codegen_host(input_args):
    code = host_header
    with format_code(indent=2):
        # write input data
        for i, (dtype, shape) in enumerate(input_args[:-1]):
            dtype = ctype_map[dtype]
            code += format_str(f'std::ifstream ifile{i}("input{i}.data");')
            code += format_str(f"if (!ifile{i}.is_open()) {{")
            code += format_str(
                '  std::cerr << "Error: Could not open input file.\\n";', strip=False
            )
            code += format_str("  return 1;", strip=False)
            code += format_str("}")
            size = np.prod(shape)
            code += format_str(
                f"auto bo_in{i} = xrt::bo(device, {size} * sizeof({dtype}),"
            )
            with format_code(indent=24):
                code += format_str(
                    f"XRT_BO_FLAGS_HOST_ONLY, kernel.group_id({i + 3}));"
                )
            code += format_str(f"{dtype} *bufIn{i} = bo_in{i}.map<{dtype} *>();")
            code += format_str(f"std::vector<{dtype}> srcVec{i};")
            code += format_str(f"for (int i = 0; i < {size}; i++) {{")
            with format_code(indent=4):
                code += format_str(f"{dtype} num;")
                code += format_str(f"ifile{i} >> num;")
                code += format_str(f"srcVec{i}.push_back(num);")
            code += format_str("}")
            code += format_str(
                f"memcpy(bufIn{i}, srcVec{i}.data(), (srcVec{i}.size() * sizeof({dtype})));"
            )
        out_dtype, out_shape = input_args[-1]
        out_dtype = ctype_map[out_dtype]
        out_size = np.prod(out_shape)
        code += format_str(
            f"\nauto bo_out = xrt::bo(device, {out_size} * sizeof({out_dtype}),",
            strip=False,
        )
        with format_code(indent=24):
            code += format_str(
                f"XRT_BO_FLAGS_HOST_ONLY, kernel.group_id({len(input_args) + 2}));"
            )
        code += format_str("if (verbosity >= 1)")
        code += format_str(
            '  std::cout << "Writing data into buffer objects.\\n";', strip=False
        )
        code += format_str("\nbo_instr.sync(XCL_BO_SYNC_BO_TO_DEVICE);", strip=False)
        for i in range(len(input_args) - 1):
            code += format_str(f"bo_in{i}.sync(XCL_BO_SYNC_BO_TO_DEVICE);")
        # run kernels
        code += format_str("if (verbosity >= 1)")
        code += format_str('  std::cout << "Running Kernel.\\n";', strip=False)
        code += format_str(
            "\nauto start = std::chrono::high_resolution_clock::now();", strip=False
        )
        code += format_str("unsigned int opcode = 3;", strip=False)
        inbufs = ", ".join([f"bo_in{i}" for i in range(len(input_args) - 1)])
        code += format_str("// gid: (opcode, instr, instr_size, ...)")
        code += format_str(
            f"auto run = kernel(opcode, bo_instr, instr_v.size(), {inbufs}, bo_out);"
        )
        code += format_str("run.wait();")
        code += format_str(
            "\nauto end = std::chrono::high_resolution_clock::now();", strip=False
        )
        code += format_str(
            "float npu_time = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();"
        )
        code += format_str(
            'std::cout << "NPU execution time: " << npu_time << "us\\n";'
        )
        # get results
        code += format_str("\nbo_out.sync(XCL_BO_SYNC_BO_FROM_DEVICE);", strip=False)
        code += format_str(f"{out_dtype} *bufOut = bo_out.map<{out_dtype} *>();")
        code += format_str(f"for (uint32_t i = 0; i < {out_size}; i++) {{")
        code += format_str('  ofile << *(bufOut + i) << "\\n";', strip=False)
        code += format_str("}")
        code += format_str("\n// Close files", strip=False)
        for i in range(len(input_args) - 1):
            code += format_str(f"ifile{i}.close();")
        code += file_close_str
    return code


def codegen_aie_mlir(mod, orig_input_args, mapping):
    input_args = orig_input_args.copy()
    code = format_str("module {", indent=0)
    mem_tile_size = 2 if len(input_args) > 2 else 1
    device = "npu1_2col" if len(input_args) > 2 else "npu1_1col"
    code += format_str(f"aie.device({device}) {{", indent=2)
    # create tiles
    code += format_str("%tile_shim = aie.tile(0, 0)")
    for mid in range(mem_tile_size):
        code += format_str(f"%tile_mem{mid} = aie.tile({mid}, 1)")
    assert len(mapping) == 1, "Only support 1D mapping for now"
    pe_size = mapping[0]
    for pid in range(pe_size):
        code += format_str(f"%tile_comp{pid} = aie.tile(0, {pid + 2})")
    # update module and args
    mod_str = str(mod)
    for i, (ele_type, shape) in enumerate(input_args):
        orig_ele_type = f"memref<{'x'.join(map(str, shape))}x{ele_type}>"
        shape = (shape[0] // pe_size, *shape[1:])
        ele_type = f"memref<{'x'.join(map(str, shape))}x{ele_type}>"
        input_args[i] = (ele_type, orig_ele_type, shape)
        mod_str = mod_str.replace(orig_ele_type, ele_type)
    # create object fifos
    # connect each argument to a separate mem tile
    for i, (in_type, orig_in_type, shape) in enumerate(input_args[:-1]):
        # depth=2 means double buffer
        code += format_str(
            f"aie.objectfifo @in_sh{i}(%tile_shim, {{%tile_mem{i}}}, 2 : i32) : !aie.objectfifo<{orig_in_type}>"
        )
        for pid in range(pe_size):
            code += format_str(
                f"aie.objectfifo @in{i}_p{pid}(%tile_mem{i}, {{%tile_comp{pid}}}, 2 : i32) : !aie.objectfifo<{in_type}>"
            )
        in_mem_str = ", ".join([f"@in{i}_p{pid}" for pid in range(pe_size)])
        shape_prod = np.prod(shape)
        in_mem_stride = list(range(0, shape_prod * pe_size, shape_prod))
        # (src_offsets, dst_offsets)
        code += format_str(
            f"aie.objectfifo.link [@in_sh{i}] -> [{in_mem_str}]([] {in_mem_stride})"
        )
    out_id = len(input_args) - 1
    out_type, orig_out_type, out_shape = input_args[-1]
    # output uses tile_mem0
    for pid in range(pe_size):
        code += format_str(
            f"aie.objectfifo @out_p{pid}(%tile_comp{pid}, {{%tile_mem0}}, 2 : i32) : !aie.objectfifo<{out_type}>"
        )
    code += format_str(
        f"aie.objectfifo @out_sh(%tile_mem0, {{%tile_shim}}, 2 : i32) : !aie.objectfifo<{orig_out_type}>"
    )
    out_mem_str = ", ".join([f"@out_p{pid}" for pid in range(pe_size)])
    shape_prod = np.prod(out_shape)
    out_mem_stride = list(range(0, shape_prod * pe_size, shape_prod))
    code += format_str(
        f"aie.objectfifo.link [{out_mem_str}] -> [@out_sh]({out_mem_stride} [])"
    )
    # create core computation
    for pid in range(pe_size):
        code += format_str(f"%core_0_{pid + 2} = aie.core(%tile_comp{pid}) {{")
        with format_code(indent=6):
            code += format_str("%c0 = arith.constant 0 : index")
            code += format_str("%c1 = arith.constant 1 : index")
            code += format_str(
                "%c9223372036854775807 = arith.constant 9223372036854775807 : index"
            )
            code += format_str(
                "scf.for %arg0 = %c0 to %c9223372036854775807 step %c1 {"
            )
            with format_code(indent=8):
                for i, (in_type, _, shape) in enumerate(input_args[:-1]):
                    code += format_str(
                        f"%fifo{i} = aie.objectfifo.acquire @in{i}_p{pid}(Consume, 1) : !aie.objectfifosubview<{in_type}>"
                    )
                    code += format_str(
                        f"%local{i} = aie.objectfifo.subview.access %fifo{i}[0] : !aie.objectfifosubview<{in_type}> -> {in_type}"
                    )
                    mod_str = mod_str.replace(f"%arg{i}", f"%local{i}")
                code += format_str(
                    f"%fifo_out = aie.objectfifo.acquire @out_p{pid}(Produce, 1) : !aie.objectfifosubview<{out_type}>"
                )
                code += format_str(
                    f"%local_out = aie.objectfifo.subview.access %fifo_out[0] : !aie.objectfifosubview<{out_type}> -> {out_type}"
                )
                mod_str = mod_str.replace(f"%arg{out_id}", "%local_out")
                with format_code(indent=4):
                    for line in mod_str.splitlines()[2:-3]:
                        code += format_str(line, strip=False)
                for i in range(len(input_args[:-1])):
                    code += format_str(
                        f"aie.objectfifo.release @in{i}_p{pid}(Consume, 1)"
                    )
                code += format_str(f"aie.objectfifo.release @out_p{pid}(Produce, 1)")
            code += format_str("}")
            code += format_str("aie.end")
        code += format_str("}")
    in_args = ", ".join(
        [
            f"%arg{i}: {orig_in_type}"
            for i, (_, orig_in_type, _) in enumerate(input_args[:-1])
        ]
    )
    code += format_str(
        f"aiex.runtime_sequence({in_args}, %arg{out_id}: {orig_out_type}) {{"
    )
    with format_code(indent=6):
        for i, (_, orig_in_type, shape) in enumerate(input_args[:-1]):
            # (x, y, memref[offset][size][stride])
            # issue_token: MM2S-false, S2MM-true
            if len(shape) == 1:
                size_n_stride = f"[1, 1, 1, {shape[0] * pe_size}][0, 0, 0, 1]"
            else:
                size_n_stride = (
                    f"[1, 1, {shape[0] * pe_size}, {shape[1]}][0, 0, {shape[1]}, 1]"
                )
            code += format_str(
                f"aiex.npu.dma_memcpy_nd(0, 0, %arg{i}[0, 0, 0, 0]{size_n_stride}) {{id = {i + 1} : i64, issue_token = true, metadata = @in_sh{i}}} : {orig_in_type}"
            )
        if len(out_shape) == 1:
            out_size_n_stride = f"[1, 1, 1, {out_shape[0] * pe_size}][0, 0, 0, 1]"
        else:
            out_size_n_stride = f"[1, 1, {out_shape[0] * pe_size}, {out_shape[1]}][0, 0, {out_shape[1]}, 1]"
        code += format_str(
            f"aiex.npu.dma_memcpy_nd(0, 0, %arg{out_id}[0, 0, 0, 0]{out_size_n_stride}) {{id = 0 : i64, metadata = @out_sh}} : {orig_out_type}"
        )
        for i in range(len(input_args) - 1):
            code += format_str(f"aiex.npu.dma_wait {{symbol = @in_sh{i}}}")
        code += format_str("aiex.npu.dma_wait {symbol = @out_sh}")
    code += format_str("}")
    code += format_str("}", indent=2)
    code += "}"
    return code


class AIEModule:
    def __init__(self, module, top_func_name, project, mapping):
        self.module = module
        self.top_func_name = top_func_name
        self.top_func = find_func_in_module(self.module, self.top_func_name)
        self.project = project
        self.module = module
        self.mapping = mapping

    def build(self):
        assert "MLIR_AIE_INSTALL_DIR" in os.environ, "Please set MLIR_AIE_INSTALL_DIR"
        assert "PEANO_INSTALL_DIR" in os.environ, "Please set PEANO_INSTALL_DIR"
        assert "LLVM_BUILD_DIR" in os.environ, "Please set LLVM_BUILD_DIR"
        inputs, outputs = get_func_inputs_outputs(self.top_func)
        input_args = inputs + outputs
        code = codegen_aie_mlir(self.module, input_args, self.mapping)
        os.makedirs(os.path.join(self.project, "build"), exist_ok=True)
        with open(os.path.join(self.project, "top.mlir"), "w", encoding="utf-8") as f:
            f.write(code)
        # build mlir-aie
        cmd = f"cd {self.project} && PYTHONPATH=$MLIR_AIE_INSTALL_DIR/python aiecc.py --aie-generate-cdo --aie-generate-npu --no-compile-host --no-xchesscc --no-xbridge --xclbin-name=build/final.xclbin --npu-insts-name=insts.txt top.mlir"
        process = subprocess.Popen(cmd, shell=True)
        process.wait()
        if process.returncode != 0:
            raise RuntimeError("Failed to compile the MLIR-AIE code")
        path = os.path.dirname(__file__)
        path = os.path.join(path, "../harness/aie")
        os.system(f"cp -r {path}/* {self.project}")
        host_code = codegen_host(input_args)
        with open(os.path.join(self.project, "test.cpp"), "w", encoding="utf-8") as f:
            f.write(host_code)
        cmd = f"cd {self.project}/build && cmake .. -DTARGET_NAME=top -DMLIR_AIE_DIR=$MLIR_AIE_INSTALL_DIR/.. && cmake --build . --config Release"
        process = subprocess.Popen(cmd, shell=True)
        process.wait()
        if process.returncode != 0:
            raise RuntimeError("Failed to build AIE project.")
        return self

    def __call__(self, *args):
        # suppose the last argument is output
        for i, arg in enumerate(args[:-1]):
            with open(
                os.path.join(self.project, f"input{i}.data"), "w", encoding="utf-8"
            ) as f:
                f.write("\n".join([str(i) for i in arg.flatten()]))
        cmd = f"cd {self.project} && ./build/top -x build/final.xclbin -i insts.txt -k MLIR_AIE"
        process = subprocess.Popen(cmd, shell=True)
        process.wait()
        if process.returncode != 0:
            raise RuntimeError("Failed to execute AIE code.")
        inputs, _ = get_func_inputs_outputs(self.top_func)
        result = read_tensor_from_file(
            inputs[-1][0], args[-1].shape, f"{self.project}/output.data"
        )
        args[-1][:] = result
